generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(cuid())
  name      String
  email     String  
  password  String
  role      Role      @default(EMPLOYEE)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  expenses  Expense[]
  Project Project[]
}

model Company {
  id        String    @id @default(cuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  services  Service[]
}

model Devise {
  id        String    @id @default(cuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Service {
  id        String   @id @default(cuid())
  name      String
  companyId String?
  rubriqueId String?
  createdAt DateTime  @default(now())
  expenses  Expense[]
  projects  Project[]
  company   Company?  @relation(fields: [companyId], references: [id])
  rubrique   Rubrique?  @relation(fields: [rubriqueId], references: [id])
}

model Rubrique {
  id        String    @id @default(cuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  services  Service[]
  expenses  Expense[]
}
model Project {
  id             String     @id @default(cuid())
  name           String
  description    String?    // Détails sur le projet
  serviceId      String
  clients       String?    // Lien vers un client s'il y en a
  userId      String?    // Responsable du projet (utilisateur)
  location       String?    // Localisation ou adresse du projet
  status        ProjectStatus @default(PLANNED) // État du projet
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  expenses       Expense[]
  service        Service    @relation(fields: [serviceId], references: [id])
  user        User?      @relation(fields: [userId], references: [id])
  milestones     Milestone[] // Étapes ou jalons du projet
  documents      Document[]  // Plans, photos, contrats

}
enum ProjectStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  ON_HOLD
  CANCELED
}
 // budget         Float?     // Budget estimé
  // devisNumber    String?    // Référence de devis ou contrat
  // startDate      DateTime   @map("datedebut")
  // endDate        DateTime   @map("dateFin")
  
model Milestone {
  id          String   @id @default(cuid())       // Identifiant unique du jalon
  projectId   String                              // Référence au projet
  title       String                              // Titre du jalon
  description String?                             // Description optionnelle
  dueDate     DateTime                            // Date prévue d'achèvement
  completed   Boolean  @default(false)            // État d'avancement (fini ou pas)
  createdAt   DateTime @default(now())            // Date de création
  updatedAt   DateTime @updatedAt                 // Date de dernière modification

  project     Project  @relation(fields: [projectId], references: [id])  
}

model Document {
  id        String   @id @default(cuid())
  title     String
  fileUrl   String   // Lien vers le fichier stocké
  type      String?  // Type de document (plan, photo, contrat)
  projectId String
  project   Project  @relation(fields: [projectId], references: [id])
}

model Supplier {
  id        String    @id @default(cuid())
  name      String @unique
  contact   String?
  email     String?
  nationalite String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  expenses  Expense[]
}

model Expense {
  id           String    @id @default(cuid())
  libelle      String?
  beneficiaire String?
  amount       Float
  date         DateTime  @default(now())
  userId       String?
  supplierId   String?
  projectId    String?
  serviceId    String?
  rubriqueId   String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  project      Project?  @relation(fields: [projectId], references: [id])
  service      Service?  @relation(fields: [serviceId], references: [id])
  supplier     Supplier? @relation(fields: [supplierId], references: [id])
  user         User?     @relation(fields: [userId], references: [id])
  rubrique     Rubrique?     @relation(fields: [rubriqueId], references: [id])
}

enum Role {
  ADMIN
  ACCOUNTANT
  EMPLOYEE
}
